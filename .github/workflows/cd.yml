name: 'Multi-Module Maven Build / Deploy'
on:
  push:
    paths-ignore:
    - 'CODE_OF_CONDUCT.md'
    - 'LICENSE.txt'
    - 'README.md'
    - 'SECURITY.md'
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build-test:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'dockerfile-image-update-') == false
    steps:
      - name: checkout
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}
      - name: docker build
        run: make mvn-docker-build get-main-project-dirs
      - name: get latest version
        id:   version_tag
        run: |
            # Get the latest patch revision
            git describe --match "dockerfile-image-update-1.0.*" --abbrev=0 --tags | export LATEST_PATCH_VERSION=$(sed s/dockerfile-image-update-1.0.//)
            echo "Latest patch version: ${LATEST_PATCH_VERSION}"
            export NEW_PATCH_VERSION=1.0.$((LATEST_PATCH_VERSION + 1))
            echo "New version: ${NEW_PATCH_VERSION}"
            echo "::set-output name=new_version::${NEW_PATCH_VERSION}"
      - name: Upload main module
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-image-update
          path: dockerfile-image-update
      - name: Upload itest module
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-image-update-itest
          path: dockerfile-image-update-itest
  integration-test:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: checkout
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}
      - name: Download itest dir
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-image-update-itest
      - name: integration test
        env:
          ITEST_GH_TOKEN: ${{ secrets.ITEST_GH_TOKEN }}
        run: echo "Testing new version ${{ steps.version_tag.outputs.new_version }}" && make integration-test
  codecov:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Download main project dir
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-image-update
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.10
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./dockerfile-image-update/target/site/jacoco/jacoco.xml
          # flags: unittests
          # yml: ./codecov.yml
          fail_ci_if_error: true
  codeclimate:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: checkout
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}
      - name: Download main project dir
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-image-update
      - name: Upload coverage to Code Climate
        uses: paambaati/codeclimate-action@v2.6.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_REPORTER_ID }}
          JACOCO_SOURCE_PATH: "${{github.workspace}}/dockerfile-image-update/src/main/java"
        with:
          # The report file must be there, otherwise Code Climate won't find it
          coverageCommand: echo "already done"
          coverageLocations: |
            ${{github.workspace}}/dockerfile-image-update/target/site/jacoco/jacoco.xml:jacoco
  master-deploy:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: checkout
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}
      - name: Download main project dir
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-image-update
      - name: deploy
        env:
          encrypted_00fae8efff8c_iv: ${{ secrets.encrypted_00fae8efff8c_iv }}
          encrypted_00fae8efff8c_key: ${{ secrets.encrypted_00fae8efff8c_key }}
          encrypted_96e73e3cb232_iv: ${{ secrets.encrypted_96e73e3cb232_iv }}
          encrypted_96e73e3cb232_key: ${{ secrets.encrypted_96e73e3cb232_key }}
          GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          CI_DEPLOY_USER: ${{ secrets.CI_DEPLOY_USER }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          NEW_PATCH_VERSION: ${{ steps.version_tag.outputs.new_version }}
        run: make deploy
